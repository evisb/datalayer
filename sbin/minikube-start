#!/usr/bin/env bash

# Licensed to Datalayer (https://datalayer.io) under one or more
# contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership. Datalayer licenses this file
# to you under the Apache License, Version 2.0 (the 
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

echo -e $BOLD$YELLOW"Starting Minikube"$NOCOLOR$NOBOLD
echo

# --container-runtime containerd
# --container-runtime rkt

# --iso-url https://github.com/coreos/minikube-iso/releases/download/v0.0.5/minikube-v0.0.5.iso
# --network-plugin cni
# --allocate-node-cidrs true
# --cluster-cidr 10.244.0.0/16
# --pod-network-cidr 10.244.0.0/16
# --hyperv-virtual-switch Minikube \
# --v 6

# --extra-config apiserver.EnableInsecureLogin.Mode=false
# --extra-config apiserver.enable-admission-plugins="LimitRanger,NamespaceExists,NamespaceLifecycle,ResourceQuota,ServiceAccount,DefaultStorageClass,MutatingAdmissionWebhook"
# --extra-config apiserver.Authorization.Mode=RBAC
# --extra-config apiserver.v=10
# --extra-config apiserver.ServiceClusterIPRange=10.1.0.1/16 \

# --extra-config kubelet.max-pods=100
# --extra-config kubelet.container-runtime=remote
# --extra-config kubelet.container-runtime-endpoint=unix:///run/containerd/containerd.sock
# --extra-config kubelet.image-service-endpoint=unix:///run/containerd/containerd.sock

start_on_linux() {
    minikube config set kubernetes-version v1.12.1
    minikube config set vm-driver kvm2
    minikube start \
        --logtostderr \
        --insecure-registry localhost:5000 \
        --v 0
}

start_on_macos() {
    minikube config set kubernetes-version v1.9.4
    minikube config set vm-driver hyperkit
    minikube start \
      --logtostderr \
      --insecure-registry localhost:5000 \
      --v 0
}

minikube config set bootstrapper kubeadm
minikube config set cpus 8
minikube config set memory 8192
minikube config set disk-size 50g
minikube config set WantReportErrorPrompt false

case "${OS}" in
    LINUX)     start_on_linux;;
    MACOS)     start_on_macos;;
    *)         echo "Unsupported operating system ${OS}"
esac

# https://kubernetes.io/docs/reference/access-authn-authz/rbac
# Many add-ons currently run as the “default” service account in the kube-system namespace. To allow those add-ons to run with super-user access, grant cluster-admin permissions to the “default” service account in the kube-system namespace.
# Note: Enabling this means the kube-system namespace contains secrets that grant super-user access to the API.
kubectl create clusterrolebinding add-on-cluster-admin \
  --clusterrole=cluster-admin \
  --serviceaccount=kube-system:default

eval $(minikube docker-env)

minikube addons enable dashboard
minikube addons enable ingress
minikube addons enable registry
minikube addons disable registry-creds
minikube addons enable storage-provisioner

DLA_SKIP_HEADER=true dla minikube-help "$@"
DLA_SKIP_HEADER=true dla minikube-status "$@"
DLA_SKIP_HEADER=true dla kubectl-check "$@"
# DLA_SKIP_HEADER=true dla minikube-dashboard "$@"
